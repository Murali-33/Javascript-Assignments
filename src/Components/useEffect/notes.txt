UseEffect:

The useEffect hook in React is used to perform side effects in functional components. Side effects
might include data fetching, subscriptions, manually changing the DOM, or any other operation that
doesn't directly relate to rendering the component. useEffect allows you to manage these side effects 
in a clean and declarative way.


useEffect(() => {
  // Side effect code
  return () => {
    // Cleanup code (optional)
  };
}, [dependencies]);



The function passed to useEffect is the side effect code that will be executed after the component renders.

The optional cleanup function (returning from useEffect) is executed when the component is unmounted or when the dependencies specified in the array change.

The array of dependencies [dependencies] is an optional argument. If provided, the effect will only run if any of the dependencies change. If no dependencies 
are provided, the effect runs after every render.


The useEffect hook in React is used to perform side effects in functional components. Side effects might include data fetching, subscriptions, manually changing the DOM, or any other operation that doesn't directly relate to rendering the component. useEffect allows you to manage these side effects in a clean and declarative way.

The basic syntax of useEffect is as follows:

jsx
Copy code
useEffect(() => {
  // Side effect code
  return () => {
    // Cleanup code (optional)
  };
}, [dependencies]);
The function passed to useEffect is the side effect code that will be executed after the component renders.

The optional cleanup function (returning from useEffect) is executed when the component is unmounted or when the dependencies specified in the array change.

The array of dependencies [dependencies] is an optional argument. If provided, the effect will only run if any of the dependencies change. If no dependencies are provided, the effect runs after every render.

Here's a simple example to illustrate the usage of useEffect:

jsx
Copy code
import React, { useState, useEffect } from 'react';

const ExampleComponent = () => {
  const [data, setData] = useState([]);

  // useEffect for data fetching
  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await fetch('https://api.example.com/data');
        const result = await response.json();
        setData(result);
      } catch (error) {
        console.error('Error fetching data:', error);
      }
    };

    fetchData();

    // Cleanup function (optional)
    return () => {
      // Any cleanup code (e.g., cancelling subscriptions) goes here
    };
  }, []); // Empty dependency array means the effect runs once after the initial render

  return (
    <div>
      <h1>Data from API:</h1>
      <ul>
        {data.map(item => (
          <li key={item.id}>{item.name}</li>
        ))}
      </ul>
    </div>
  );
};

export default ExampleComponent;
When to use useEffect:

Data Fetching: Use useEffect to fetch data from APIs or external sources when the component mounts.

Subscription to External Data: If your component needs to subscribe to external data sources, like websockets, you can use useEffect for setting up and cleaning up subscriptions.

DOM Manipulation: If you need to perform manual DOM manipulations (e.g., interacting with the DOM directly), useEffect is appropriate.

Side Effects on Component Updates: If you need to perform side effects based on changes to the component's state or props, use useEffect with the relevant dependencies.

Cleanup Operations: If your side effect involves any cleanup operations (e.g., clearing intervals or cancelling subscriptions), you can define a cleanup function.
